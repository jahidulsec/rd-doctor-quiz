generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model mio {
  zone               String   @db.VarChar(100)
  region             String   @db.VarChar(100)
  sap_territory_code String   @id @db.VarChar(10)
  territory          String   @db.VarChar(100)
  doctor             doctor[]
}

model doctor {
  full_name     String          @db.VarChar(100)
  password      String          @db.VarChar(50)
  created_at    DateTime        @default(now()) @db.DateTime(0)
  updated_at    DateTime        @default(now()) @updatedAt @db.DateTime(0)
  mio_id        String?         @db.VarChar(36)
  mobile        String          @id @unique(map: "uc_mobile") @db.VarChar(20)
  image         String          @db.VarChar(255)
  mio           mio?            @relation(fields: [mio_id], references: [sap_territory_code], onUpdate: Restrict, map: "fk_mio_doctor")
  doctor_submit doctor_submit[]
  group_doctor  group_doctor[]

  @@index([mio_id], map: "fk_mio_doctor")
}

model question {
  id             String          @id @db.VarChar(36)
  title          String          @db.VarChar(100)
  option_1       String?         @db.VarChar(100)
  option_2       String?         @db.VarChar(100)
  option_3       String?         @db.VarChar(100)
  option_4       String?         @db.VarChar(100)
  answer         Int
  created_at     DateTime        @default(now()) @db.DateTime(0)
  updated_at     DateTime        @default(now()) @updatedAt @db.DateTime(0)
  group_id       String          @db.VarChar(36)
  doctor_submit  doctor_submit[]
  question_group question_group  @relation(fields: [group_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "question_ibfk_1")

  @@index([group_id], map: "group_id")
}

model doctor_submit {
  id          String    @id @default(uuid()) @db.VarChar(36)
  doctor_id   String    @db.VarChar(36)
  question_id String    @db.VarChar(36)
  answer      Int
  created_at  DateTime? @default(now()) @db.DateTime(0)
  updated_at  DateTime? @default(now()) @updatedAt @db.DateTime(0)
  mark        Int       @default(0) @db.TinyInt
  doctor      doctor    @relation(fields: [doctor_id], references: [mobile], onDelete: Cascade, onUpdate: Restrict, map: "fk_doctor_submit_doctor")
  question    question  @relation(fields: [question_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_doctor_submit_question")

  @@unique([doctor_id, question_id], map: "unique_doctor_question")
  @@index([question_id], map: "fk_doctor_submit_question")
}

model admin {
  id         String   @id @default(uuid()) @db.VarChar(36)
  username   String   @unique(map: "uc_admin") @db.VarChar(100)
  full_name  String   @db.VarChar(100)
  password   String   @db.VarChar(100)
  created_at DateTime @default(now()) @db.DateTime(0)
}

model group_doctor {
  id             String         @id @default(uuid()) @db.VarChar(36)
  group_id       String         @db.VarChar(100)
  doctor_id      String         @db.VarChar(100)
  start_date     DateTime       @db.DateTime(0)
  end_date       DateTime?      @db.DateTime(0)
  created_at     DateTime?      @default(now()) @db.Timestamp(0)
  updated_at     DateTime?      @default(now()) @updatedAt @db.Timestamp(0)
  duration_s     Decimal?       @default(30000.00) @db.Decimal(10, 2)
  question_group question_group @relation(fields: [group_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "group_doctor_ibfk_1")
  doctor         doctor         @relation(fields: [doctor_id], references: [mobile], onDelete: Cascade, onUpdate: Restrict, map: "group_doctor_ibfk_2")

  @@unique([group_id, doctor_id], map: "group_id")
  @@index([doctor_id], map: "doctor_id")
}

model quater {
  id             String           @id @default(uuid()) @db.VarChar(36)
  title          String           @db.VarChar(100)
  start_date     DateTime         @db.DateTime(0)
  end_date       DateTime         @db.DateTime(0)
  created_at     DateTime?        @default(now()) @db.Timestamp(0)
  updated_at     DateTime?        @default(now()) @updatedAt @db.Timestamp(0)
  question_group question_group[]
}

model question_group {
  id           String         @id @default(uuid()) @db.VarChar(36)
  quater_id    String         @db.VarChar(100)
  created_at   DateTime?      @default(now()) @db.Timestamp(0)
  updated_at   DateTime?      @default(now()) @updatedAt @db.Timestamp(0)
  quiz_date    DateTime       @db.DateTime(0)
  group_doctor group_doctor[]
  question     question[]
  quater       quater         @relation(fields: [quater_id], references: [id], onUpdate: Restrict, map: "question_group_ibfk_1")

  @@index([quater_id], map: "quater_id")
}
